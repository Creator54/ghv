#!/usr/bin/env bash
# A CLI tool to explore public repositories hosted on GitHub.

# Check if required dependencies are available
deps_status=$(which jq gh fzf bat)
if [[ ! $deps_status ]]; then
	echo "Please make sure jq, gh, fzf and bat are available in the environment!"
	exit 1
fi

# Function to display file content
function preview() {
	local file_content=$(gh api -X GET "/repos/$owner/$repo/contents/$path" | jq -r '.content' | base64 -d)

	echo "$file_content" | bat --paging always
}

# Function to explore GitHub
function explorer() {
	response=$(gh api -X GET "/repos/$owner/$repo/contents/$path")
	repo_pwd="$repo/$(echo $path | sed 's#^/##')"
	selection=$(echo $response | jq -r '.[].name' | fzf --header "$owner: [ $repo_pwd ]")

	handle_interrupt

	type_check=$(echo "$response" | jq -r 'type') # If object then preview, if array then open
	path="$path/$selection"

	if [[ $type_check == "object" ]]; then
		preview
	else
		explorer
	fi
}

# Function to display help menu
function show_help() {
	bat <<-USAGE
		Usage: $0 <username/repo/folder>

		A CLI tool to explore public repositories hosted on GitHub.

		Example:
		  $ $0 nixos
		  $ $0 nixos/nix
		  $ $0 nixos/nix/README.md
		  $ $0 https://github.com/nixos/nix/README.md
		  $ $0 https://github.com/nixos/nix/blob/master/README.md

	USAGE
	exit 1
}

# Check if Ctrl+C was pressed
function handle_interrupt() {
	if [[ $? -eq 130 ]]; then
		exit 0
	fi
}

# Register the handle_interrupt function to handle Ctrl+C
trap handle_interrupt SIGINT

input=$1
# Main script
while true; do
	# Check if a GitHub username is provided as an argument
	if [[ -z $input ]]; then
		show_help
	fi

	if echo "$input" | grep -q "blob"; then
		input=$(echo "$input" | sed 's|/blob/[^/]*/|/|')
	fi

	if echo "$input" | grep -q "http"; then
		input="$(echo "$input" | cut -d'/' -f4-)"
	fi

	owner=$(echo $input | cut -d '/' -f1)
	repo=$(echo $input | cut -d '/' -f2)
	path=$(echo $input | cut -d '/' -f3- | sed 's/\/$//')

	if [[ $owner == $repo ]]; then
		path=""
		repo=$(gh api "/users/$owner/repos?per_page=100&page=1" | jq -r '.[].name' | fzf --header "$owner: [ $repo$path ]")

		handle_interrupt

		# Check if the selection is invalid and restart the loop
		if [[ -z $repo ]]; then
			continue
		fi

	fi

	explorer
done
